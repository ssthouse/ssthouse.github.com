(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{2:function(e,n){e.exports=function(t){var a=[];return a.toString=function(){return this.map(function(e){var n=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[t].concat(i).concat([o]).join("\n")}var a;return[t].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},a.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var t={},r=0;r<this.length;r++){var o=this[r][0];"number"==typeof o&&(t[o]=!0)}for(r=0;r<e.length;r++){var i=e[r];"number"==typeof i[0]&&t[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),a.push(i))}},a}},59:function(i,a,e){(function(r){var e,n,t,o,ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};o=function(){return function o(i,a,u){function c(t,e){if(!a[t]){if(!i[t]){if(f)return f(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var r=a[t]={exports:{}};i[t][0].call(r.exports,function(e){var n=i[t][1][e];return c(n||e)},r,r.exports,o,i,a,u)}return a[t].exports}for(var f=!1,e=0;e<u.length;e++)c(u[e]);return c}({1:[function(e,s,n){(function(n){"use strict";var t,r,e=n.MutationObserver||n.WebKitMutationObserver;if(e){var o=0,i=new e(f),a=n.document.createTextNode("");i.observe(a,{characterData:!0}),t=function(){a.data=o=++o%2}}else if(n.setImmediate||void 0===n.MessageChannel)t="document"in n&&"onreadystatechange"in n.document.createElement("script")?function(){var e=n.document.createElement("script");e.onreadystatechange=function(){f(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},n.document.documentElement.appendChild(e)}:function(){setTimeout(f,0)};else{var u=new n.MessageChannel;u.port1.onmessage=f,t=function(){u.port2.postMessage(0)}}var c=[];function f(){var e,n;r=!0;for(var t=c.length;t;){for(n=c,c=[],e=-1;++e<t;)n[e]();t=c.length}r=!1}s.exports=function(e){1!==c.push(e)||r||t()}}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(e,n,t){"use strict";var o=e(1);function f(){}var s={},i=["REJECTED"],a=["FULFILLED"],r=["PENDING"];function u(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=r,this.queue=[],this.outcome=void 0,e!==f&&v(this,e)}function c(e,n,t){this.promise=e,"function"==typeof n&&(this.onFulfilled=n,this.callFulfilled=this.otherCallFulfilled),"function"==typeof t&&(this.onRejected=t,this.callRejected=this.otherCallRejected)}function l(n,t,r){o(function(){var e;try{e=t(r)}catch(e){return s.reject(n,e)}e===n?s.reject(n,new TypeError("Cannot resolve promise with itself")):s.resolve(n,e)})}function d(e){var n=e&&e.then;if(e&&("object"===(void 0===e?"undefined":ie(e))||"function"==typeof e)&&"function"==typeof n)return function(){n.apply(e,arguments)}}function v(n,e){var t=!1;function r(e){t||(t=!0,s.reject(n,e))}function o(e){t||(t=!0,s.resolve(n,e))}var i=h(function(){e(o,r)});"error"===i.status&&r(i.value)}function h(e,n){var t={};try{t.value=e(n),t.status="success"}catch(e){t.status="error",t.value=e}return t}(n.exports=u).prototype.catch=function(e){return this.then(null,e)},u.prototype.then=function(e,n){if("function"!=typeof e&&this.state===a||"function"!=typeof n&&this.state===i)return this;var t=new this.constructor(f);this.state!==r?l(t,this.state===a?e:n,this.outcome):this.queue.push(new c(t,e,n));return t},c.prototype.callFulfilled=function(e){s.resolve(this.promise,e)},c.prototype.otherCallFulfilled=function(e){l(this.promise,this.onFulfilled,e)},c.prototype.callRejected=function(e){s.reject(this.promise,e)},c.prototype.otherCallRejected=function(e){l(this.promise,this.onRejected,e)},s.resolve=function(e,n){var t=h(d,n);if("error"===t.status)return s.reject(e,t.value);var r=t.value;if(r)v(e,r);else{e.state=a,e.outcome=n;for(var o=-1,i=e.queue.length;++o<i;)e.queue[o].callFulfilled(n)}return e},s.reject=function(e,n){e.state=i,e.outcome=n;for(var t=-1,r=e.queue.length;++t<r;)e.queue[t].callRejected(n);return e},u.resolve=function(e){if(e instanceof this)return e;return s.resolve(new this(f),e)},u.reject=function(e){var n=new this(f);return s.reject(n,e)},u.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,o=!1;if(!r)return this.resolve([]);var i=new Array(r),a=0,n=-1,u=new this(f);for(;++n<r;)c(e[n],n);return u;function c(e,n){t.resolve(e).then(function(e){i[n]=e,++a!==r||o||(o=!0,s.resolve(u,i))},function(e){o||(o=!0,s.reject(u,e))})}},u.race=function(e){var n=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,r=!1;if(!t)return this.resolve([]);var o=-1,i=new this(f);for(;++o<t;)a=e[o],n.resolve(a).then(function(e){r||(r=!0,s.resolve(i,e))},function(e){r||(r=!0,s.reject(i,e))});var a;return i}},{1:1}],3:[function(n,e,t){(function(e){"use strict";"function"!=typeof e.Promise&&(e.Promise=n(2))}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(e,n,t){"use strict";var r="function"==typeof Symbol&&"symbol"===ie(Symbol.iterator)?function(e){return void 0===e?"undefined":ie(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":ie(e)};var u=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(e){return}}();function a(n,t){n=n||[],t=t||{};try{return new Blob(n,t)}catch(e){if("TypeError"!==e.name)throw e;for(var r=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),o=0;o<n.length;o+=1)r.append(n[o]);return r.getBlob(t.type)}}"undefined"==typeof Promise&&e(3);var l=Promise;function d(e,n){n&&e.then(function(e){n(null,e)},function(e){n(e)})}function c(e,n,t){"function"==typeof n&&e.then(n),"function"==typeof t&&e.catch(t)}function v(e){return"string"!=typeof e&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}function i(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var f="local-forage-detect-blob-support",o=void 0,s={},h=Object.prototype.toString,y="readonly",p="readwrite";function b(e){return"boolean"==typeof o?l.resolve(o):(r=e,new l(function(t){var e=r.transaction(f,p),n=a([""]);e.objectStore(f).put(n,"key"),e.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)},e.oncomplete=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!e||43<=parseInt(e[1],10))}}).catch(function(){return!1})).then(function(e){return o=e});var r}function m(e){var n=s[e.name],t={};t.promise=new l(function(e,n){t.resolve=e,t.reject=n}),n.deferredOperations.push(t),n.dbReady?n.dbReady=n.dbReady.then(function(){return t.promise}):n.dbReady=t.promise}function g(e){var n=s[e.name].deferredOperations.pop();if(n)return n.resolve(),n.promise}function _(e,n){var t=s[e.name].deferredOperations.pop();if(t)return t.reject(n),t.promise}function w(o,i){return new l(function(e,n){if(s[o.name]=s[o.name]||{forages:[],db:null,dbReady:null,deferredOperations:[]},o.db){if(!i)return e(o.db);m(o),o.db.close()}var t=[o.name];i&&t.push(o.version);var r=u.open.apply(u,t);i&&(r.onupgradeneeded=function(n){var e=r.result;try{e.createObjectStore(o.storeName),n.oldVersion<=1&&e.createObjectStore(f)}catch(e){if("ConstraintError"!==e.name)throw e;console.warn('The database "'+o.name+'" has been upgraded from version '+n.oldVersion+" to version "+n.newVersion+', but the storage "'+o.storeName+'" already exists.')}}),r.onerror=function(e){e.preventDefault(),n(r.error)},r.onsuccess=function(){e(r.result),g(o)}})}function I(e){return w(e,!1)}function S(e){return w(e,!0)}function E(e,n){if(!e.db)return!0;var t=!e.db.objectStoreNames.contains(e.storeName),r=e.version<e.db.version,o=e.version>e.db.version;if(r&&(e.version!==n&&console.warn('The database "'+e.name+"\" can't be downgraded from version "+e.db.version+" to version "+e.version+"."),e.version=e.db.version),o||t){if(t){var i=e.db.version+1;i>e.version&&(e.version=i)}return!0}return!1}function N(e){return a([function(e){for(var n=e.length,t=new ArrayBuffer(n),r=new Uint8Array(t),o=0;o<n;o++)r[o]=e.charCodeAt(o);return t}(atob(e.data))],{type:e.type})}function j(e){return e&&e.__local_forage_encoded_blob}function R(e){var n=this,t=n._initReady().then(function(){var e=s[n._dbInfo.name];if(e&&e.dbReady)return e.dbReady});return c(t,e,e),t}function A(n,t,r,o){void 0===o&&(o=1);try{var e=n.db.transaction(n.storeName,t);r(null,e)}catch(e){if(0<o&&(!n.db||"InvalidStateError"===e.name||"NotFoundError"===e.name))return l.resolve().then(function(){if(!n.db||"NotFoundError"===e.name&&!n.db.objectStoreNames.contains(n.storeName)&&n.version<=n.db.version)return n.db&&(n.version=n.db.version+1),S(n)}).then(function(){return function(t){m(t);for(var r=s[t.name],o=r.forages,e=0;e<o.length;e++){var n=o[e];n._dbInfo.db&&(n._dbInfo.db.close(),n._dbInfo.db=null)}return t.db=null,I(t).then(function(e){return t.db=e,E(t)?S(t):e}).then(function(e){t.db=r.db=e;for(var n=0;n<o.length;n++)o[n]._dbInfo.db=e}).catch(function(e){throw _(t,e),e})}(n).then(function(){A(n,t,r,o-1)})}).catch(r);r(e)}}var O={_driver:"asyncStorage",_initStorage:function(e){var r=this,o={db:null};if(e)for(var n in e)o[n]=e[n];var i=s[o.name];i||(i={forages:[],db:null,dbReady:null,deferredOperations:[]},s[o.name]=i),i.forages.push(r),r._initReady||(r._initReady=r.ready,r.ready=R);var t=[];function a(){return l.resolve()}for(var u=0;u<i.forages.length;u++){var c=i.forages[u];c!==r&&t.push(c._initReady().catch(a))}var f=i.forages.slice(0);return l.all(t).then(function(){return o.db=i.db,I(o)}).then(function(e){return o.db=e,E(o,r._defaultConfig.version)?S(o):e}).then(function(e){o.db=i.db=e,r._dbInfo=o;for(var n=0;n<f.length;n++){var t=f[n];t!==r&&(t._dbInfo.db=o.db,t._dbInfo.version=o.version)}})},_support:function(){try{if(!u)return!1;var e="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),n="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!e||n)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}}(),iterate:function(a,e){var u=this,n=new l(function(i,t){u.ready().then(function(){A(u._dbInfo,y,function(e,n){if(e)return t(e);try{var r=n.objectStore(u._dbInfo.storeName).openCursor(),o=1;r.onsuccess=function(){var e=r.result;if(e){var n=e.value;j(n)&&(n=N(n));var t=a(n,e.key,o++);void 0!==t?i(t):e.continue()}else i()},r.onerror=function(){t(r.error)}}catch(e){t(e)}})}).catch(t)});return d(n,e),n},getItem:function(i,e){var a=this;i=v(i);var n=new l(function(r,o){a.ready().then(function(){A(a._dbInfo,y,function(e,n){if(e)return o(e);try{var t=n.objectStore(a._dbInfo.storeName).get(i);t.onsuccess=function(){var e=t.result;void 0===e&&(e=null),j(e)&&(e=N(e)),r(e)},t.onerror=function(){o(t.error)}}catch(e){o(e)}})}).catch(o)});return d(n,e),n},setItem:function(u,n,e){var c=this;u=v(u);var t=new l(function(i,a){var e;c.ready().then(function(){return e=c._dbInfo,"[object Blob]"===h.call(n)?b(e.db).then(function(e){return e?n:(r=n,new l(function(t,e){var n=new FileReader;n.onerror=e,n.onloadend=function(e){var n=btoa(e.target.result||"");t({__local_forage_encoded_blob:!0,data:n,type:r.type})},n.readAsBinaryString(r)}));var r}):n}).then(function(o){A(c._dbInfo,p,function(e,n){if(e)return a(e);try{var t=n.objectStore(c._dbInfo.storeName);null===o&&(o=void 0);var r=t.put(o,u);n.oncomplete=function(){void 0===o&&(o=null),i(o)},n.onabort=n.onerror=function(){var e=r.error?r.error:r.transaction.error;a(e)}}catch(e){a(e)}})}).catch(a)});return d(t,e),t},removeItem:function(i,e){var a=this;i=v(i);var n=new l(function(r,o){a.ready().then(function(){A(a._dbInfo,p,function(e,n){if(e)return o(e);try{var t=n.objectStore(a._dbInfo.storeName).delete(i);n.oncomplete=function(){r()},n.onerror=function(){o(t.error)},n.onabort=function(){var e=t.error?t.error:t.transaction.error;o(e)}}catch(e){o(e)}})}).catch(o)});return d(n,e),n},clear:function(e){var i=this,n=new l(function(r,o){i.ready().then(function(){A(i._dbInfo,p,function(e,n){if(e)return o(e);try{var t=n.objectStore(i._dbInfo.storeName).clear();n.oncomplete=function(){r()},n.onabort=n.onerror=function(){var e=t.error?t.error:t.transaction.error;o(e)}}catch(e){o(e)}})}).catch(o)});return d(n,e),n},length:function(e){var i=this,n=new l(function(r,o){i.ready().then(function(){A(i._dbInfo,y,function(e,n){if(e)return o(e);try{var t=n.objectStore(i._dbInfo.storeName).count();t.onsuccess=function(){r(t.result)},t.onerror=function(){o(t.error)}}catch(e){o(e)}})}).catch(o)});return d(n,e),n},key:function(u,e){var c=this,n=new l(function(i,a){u<0?i(null):c.ready().then(function(){A(c._dbInfo,y,function(e,n){if(e)return a(e);try{var t=n.objectStore(c._dbInfo.storeName),r=!1,o=t.openCursor();o.onsuccess=function(){var e=o.result;e?0===u?i(e.key):r?i(e.key):(r=!0,e.advance(u)):i(null)},o.onerror=function(){a(o.error)}}catch(e){a(e)}})}).catch(a)});return d(n,e),n},keys:function(e){var a=this,n=new l(function(o,i){a.ready().then(function(){A(a._dbInfo,y,function(e,n){if(e)return i(e);try{var t=n.objectStore(a._dbInfo.storeName).openCursor(),r=[];t.onsuccess=function(){var e=t.result;e?(r.push(e.key),e.continue()):o(r)},t.onerror=function(){i(t.error)}}catch(e){i(e)}})}).catch(i)});return d(n,e),n},dropInstance:function(a,e){e=i.apply(this,arguments);var n,t=this.config();if((a="function"!=typeof a&&a||{}).name||(a.name=a.name||t.name,a.storeName=a.storeName||t.storeName),a.name){var r=a.name===t.name&&this._dbInfo.db?l.resolve(this._dbInfo.db):I(a).then(function(e){var n=s[a.name],t=n.forages;n.db=e;for(var r=0;r<t.length;r++)t[r]._dbInfo.db=e;return e});n=a.storeName?r.then(function(e){if(e.objectStoreNames.contains(a.storeName)){var o=e.version+1;m(a);var r=s[a.name],i=r.forages;e.close();for(var n=0;n<i.length;n++){var t=i[n];t._dbInfo.db=null,t._dbInfo.version=o}return new l(function(n,t){var r=u.open(a.name,o);r.onerror=function(e){r.result.close(),t(e)},r.onupgradeneeded=function(){r.result.deleteObjectStore(a.storeName)},r.onsuccess=function(){var e=r.result;e.close(),n(e)}}).then(function(e){r.db=e;for(var n=0;n<i.length;n++){var t=i[n];t._dbInfo.db=e,g(t._dbInfo)}}).catch(function(e){throw(_(a,e)||l.resolve()).catch(function(){}),e})}}):r.then(function(e){m(a);var t=s[a.name],r=t.forages;e.close();for(var n=0;n<r.length;n++)r[n]._dbInfo.db=null;return new l(function(n,t){var r=u.deleteDatabase(a.name);r.onerror=r.onblocked=function(e){var n=r.result;n&&n.close(),t(e)},r.onsuccess=function(){var e=r.result;e&&e.close(),n(e)}}).then(function(e){t.db=e;for(var n=0;n<r.length;n++)g(r[n]._dbInfo)}).catch(function(e){throw(_(a,e)||l.resolve()).catch(function(){}),e})})}else n=l.reject("Invalid arguments");return d(n,e),n}};var T="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",D=/^~~local_forage_type~([^~]+)~/,x="__lfsc__:",k=x.length,B="arbf",C="blob",L=k+B.length,F=Object.prototype.toString;function M(e){var n,t,r,o,i,a=.75*e.length,u=e.length,c=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var f=new ArrayBuffer(a),s=new Uint8Array(f);for(n=0;n<u;n+=4)t=T.indexOf(e[n]),r=T.indexOf(e[n+1]),o=T.indexOf(e[n+2]),i=T.indexOf(e[n+3]),s[c++]=t<<2|r>>4,s[c++]=(15&r)<<4|o>>2,s[c++]=(3&o)<<6|63&i;return f}function z(e){var n,t=new Uint8Array(e),r="";for(n=0;n<t.length;n+=3)r+=T[t[n]>>2],r+=T[(3&t[n])<<4|t[n+1]>>4],r+=T[(15&t[n+1])<<2|t[n+2]>>6],r+=T[63&t[n+2]];return t.length%3==2?r=r.substring(0,r.length-1)+"=":t.length%3==1&&(r=r.substring(0,r.length-2)+"=="),r}var P={serialize:function(n,t){var e="";if(n&&(e=F.call(n)),n&&("[object ArrayBuffer]"===e||n.buffer&&"[object ArrayBuffer]"===F.call(n.buffer))){var r,o=x;n instanceof ArrayBuffer?(r=n,o+=B):(r=n.buffer,"[object Int8Array]"===e?o+="si08":"[object Uint8Array]"===e?o+="ui08":"[object Uint8ClampedArray]"===e?o+="uic8":"[object Int16Array]"===e?o+="si16":"[object Uint16Array]"===e?o+="ur16":"[object Int32Array]"===e?o+="si32":"[object Uint32Array]"===e?o+="ui32":"[object Float32Array]"===e?o+="fl32":"[object Float64Array]"===e?o+="fl64":t(new Error("Failed to get type for BinaryArray"))),t(o+z(r))}else if("[object Blob]"===e){var i=new FileReader;i.onload=function(){var e="~~local_forage_type~"+n.type+"~"+z(this.result);t(x+C+e)},i.readAsArrayBuffer(n)}else try{t(JSON.stringify(n))}catch(e){console.error("Couldn't convert value into a JSON string: ",n),t(null,e)}},deserialize:function(e){if(e.substring(0,k)!==x)return JSON.parse(e);var n,t=e.substring(L),r=e.substring(k,L);if(r===C&&D.test(t)){var o=t.match(D);n=o[1],t=t.substring(o[0].length)}var i=M(t);switch(r){case B:return i;case C:return a([i],{type:n});case"si08":return new Int8Array(i);case"ui08":return new Uint8Array(i);case"uic8":return new Uint8ClampedArray(i);case"si16":return new Int16Array(i);case"ur16":return new Uint16Array(i);case"si32":return new Int32Array(i);case"ui32":return new Uint32Array(i);case"fl32":return new Float32Array(i);case"fl64":return new Float64Array(i);default:throw new Error("Unkown type: "+r)}},stringToBuffer:M,bufferToString:z};function U(e,n,t,r){e.executeSql("CREATE TABLE IF NOT EXISTS "+n.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],t,r)}function q(e,r,o,i,a,u){e.executeSql(o,i,a,function(e,t){t.code===t.SYNTAX_ERR?e.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[r.storeName],function(e,n){n.rows.length?u(e,t):U(e,r,function(){e.executeSql(o,i,a,u)},u)},u):u(e,t)},u)}var W={_driver:"webSQLStorage",_initStorage:function(e){var r=this,o={db:null};if(e)for(var n in e)o[n]="string"!=typeof e[n]?e[n].toString():e[n];var t=new l(function(n,t){try{o.db=openDatabase(o.name,String(o.version),o.description,o.size)}catch(e){return t(e)}o.db.transaction(function(e){U(e,o,function(){r._dbInfo=o,n()},function(e,n){t(n)})},t)});return o.serializer=P,t},_support:"function"==typeof openDatabase,iterate:function(f,e){var n=this,t=new l(function(c,t){n.ready().then(function(){var u=n._dbInfo;u.db.transaction(function(e){q(e,u,"SELECT * FROM "+u.storeName,[],function(e,n){for(var t=n.rows,r=t.length,o=0;o<r;o++){var i=t.item(o),a=i.value;if(a&&(a=u.serializer.deserialize(a)),void 0!==(a=f(a,i.key,o+1)))return void c(a)}c()},function(e,n){t(n)})})}).catch(t)});return d(t,e),t},getItem:function(n,e){var i=this;n=v(n);var t=new l(function(o,t){i.ready().then(function(){var r=i._dbInfo;r.db.transaction(function(e){q(e,r,"SELECT * FROM "+r.storeName+" WHERE key = ? LIMIT 1",[n],function(e,n){var t=n.rows.length?n.rows.item(0).value:null;t&&(t=r.serializer.deserialize(t)),o(t)},function(e,n){t(n)})})}).catch(t)});return d(t,e),t},setItem:function(e,n,t){return function a(u,e,c,f){var s=this;u=v(u);var n=new l(function(o,i){s.ready().then(function(){void 0===e&&(e=null);var t=e,r=s._dbInfo;r.serializer.serialize(e,function(n,e){e?i(e):r.db.transaction(function(e){q(e,r,"INSERT OR REPLACE INTO "+r.storeName+" (key, value) VALUES (?, ?)",[u,n],function(){o(t)},function(e,n){i(n)})},function(e){if(e.code===e.QUOTA_ERR){if(0<f)return void o(a.apply(s,[u,t,c,f-1]));i(e)}})})}).catch(i)});return d(n,c),n}.apply(this,[e,n,t,1])},removeItem:function(o,e){var i=this;o=v(o);var n=new l(function(t,r){i.ready().then(function(){var n=i._dbInfo;n.db.transaction(function(e){q(e,n,"DELETE FROM "+n.storeName+" WHERE key = ?",[o],function(){t()},function(e,n){r(n)})})}).catch(r)});return d(n,e),n},clear:function(e){var o=this,n=new l(function(t,r){o.ready().then(function(){var n=o._dbInfo;n.db.transaction(function(e){q(e,n,"DELETE FROM "+n.storeName,[],function(){t()},function(e,n){r(n)})})}).catch(r)});return d(n,e),n},length:function(e){var o=this,n=new l(function(r,t){o.ready().then(function(){var n=o._dbInfo;n.db.transaction(function(e){q(e,n,"SELECT COUNT(key) as c FROM "+n.storeName,[],function(e,n){var t=n.rows.item(0).c;r(t)},function(e,n){t(n)})})}).catch(t)});return d(n,e),n},key:function(o,e){var i=this,n=new l(function(r,t){i.ready().then(function(){var n=i._dbInfo;n.db.transaction(function(e){q(e,n,"SELECT key FROM "+n.storeName+" WHERE id = ? LIMIT 1",[o+1],function(e,n){var t=n.rows.length?n.rows.item(0).key:null;r(t)},function(e,n){t(n)})})}).catch(t)});return d(n,e),n},keys:function(e){var r=this,n=new l(function(o,t){r.ready().then(function(){var n=r._dbInfo;n.db.transaction(function(e){q(e,n,"SELECT key FROM "+n.storeName,[],function(e,n){for(var t=[],r=0;r<n.rows.length;r++)t.push(n.rows.item(r).key);o(t)},function(e,n){t(n)})})}).catch(t)});return d(n,e),n},dropInstance:function(t,e){e=i.apply(this,arguments);var r=this.config();(t="function"!=typeof t&&t||{}).name||(t.name=t.name||r.name,t.storeName=t.storeName||r.storeName);var n,o=this;return d(n=t.name?new l(function(e){var n,i;n=t.name===r.name?o._dbInfo.db:openDatabase(t.name,"","",0),t.storeName?e({db:n,storeNames:[t.storeName]}):e((i=n,new l(function(o,t){i.transaction(function(e){e.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],function(e,n){for(var t=[],r=0;r<n.rows.length;r++)t.push(n.rows.item(r).name);o({db:i,storeNames:t})},function(e,n){t(n)})},function(e){t(e)})})))}).then(function(u){return new l(function(i,a){u.db.transaction(function(r){function e(n){return new l(function(e,t){r.executeSql("DROP TABLE IF EXISTS "+n,[],function(){e()},function(e,n){t(n)})})}for(var n=[],t=0,o=u.storeNames.length;t<o;t++)n.push(e(u.storeNames[t]));l.all(n).then(function(){i()}).catch(function(e){a(e)})},function(e){a(e)})})}):l.reject("Invalid arguments"),e),n}};function J(e,n){var t=e.name+"/";return e.storeName!==n.storeName&&(t+=e.storeName+"/"),t}function H(){return!function(){var e="_localforage_support_test";try{return localStorage.setItem(e,!0),localStorage.removeItem(e),!1}catch(e){return!0}}()||0<localStorage.length}var Q={_driver:"localStorageWrapper",_initStorage:function(e){var n={};if(e)for(var t in e)n[t]=e[t];return n.keyPrefix=J(e,this._defaultConfig),H()?((this._dbInfo=n).serializer=P,l.resolve()):l.reject()},_support:function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(e){return!1}}(),iterate:function(c,e){var f=this,n=f.ready().then(function(){for(var e=f._dbInfo,n=e.keyPrefix,t=n.length,r=localStorage.length,o=1,i=0;i<r;i++){var a=localStorage.key(i);if(0===a.indexOf(n)){var u=localStorage.getItem(a);if(u&&(u=e.serializer.deserialize(u)),void 0!==(u=c(u,a.substring(t),o++)))return u}}});return d(n,e),n},getItem:function(t,e){var r=this;t=v(t);var n=r.ready().then(function(){var e=r._dbInfo,n=localStorage.getItem(e.keyPrefix+t);return n&&(n=e.serializer.deserialize(n)),n});return d(n,e),n},setItem:function(a,e,n){var u=this;a=v(a);var t=u.ready().then(function(){void 0===e&&(e=null);var i=e;return new l(function(t,r){var o=u._dbInfo;o.serializer.serialize(e,function(e,n){if(n)r(n);else try{localStorage.setItem(o.keyPrefix+a,e),t(i)}catch(e){"QuotaExceededError"!==e.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==e.name||r(e),r(e)}})})});return d(t,n),t},removeItem:function(n,e){var t=this;n=v(n);var r=t.ready().then(function(){var e=t._dbInfo;localStorage.removeItem(e.keyPrefix+n)});return d(r,e),r},clear:function(e){var r=this,n=r.ready().then(function(){for(var e=r._dbInfo.keyPrefix,n=localStorage.length-1;0<=n;n--){var t=localStorage.key(n);0===t.indexOf(e)&&localStorage.removeItem(t)}});return d(n,e),n},length:function(e){var n=this.keys().then(function(e){return e.length});return d(n,e),n},key:function(t,e){var r=this,n=r.ready().then(function(){var n,e=r._dbInfo;try{n=localStorage.key(t)}catch(e){n=null}return n&&(n=n.substring(e.keyPrefix.length)),n});return d(n,e),n},keys:function(e){var i=this,n=i.ready().then(function(){for(var e=i._dbInfo,n=localStorage.length,t=[],r=0;r<n;r++){var o=localStorage.key(r);0===o.indexOf(e.keyPrefix)&&t.push(o.substring(e.keyPrefix.length))}return t});return d(n,e),n},dropInstance:function(n,e){if(e=i.apply(this,arguments),!(n="function"!=typeof n&&n||{}).name){var t=this.config();n.name=n.name||t.name,n.storeName=n.storeName||t.storeName}var r,o=this;return d(r=n.name?new l(function(e){n.storeName?e(J(n,o._defaultConfig)):e(n.name+"/")}).then(function(e){for(var n=localStorage.length-1;0<=n;n--){var t=localStorage.key(n);0===t.indexOf(e)&&localStorage.removeItem(t)}}):l.reject("Invalid arguments"),e),r}},K=function(e,n){for(var t,r,o=e.length,i=0;i<o;){if((t=e[i])===(r=n)||"number"==typeof t&&"number"==typeof r&&isNaN(t)&&isNaN(r))return!0;i++}return!1},X=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},G={},V={},Y={INDEXEDDB:O,WEBSQL:W,LOCALSTORAGE:Q},Z=[Y.INDEXEDDB._driver,Y.WEBSQL._driver,Y.LOCALSTORAGE._driver],$=["dropInstance"],ee=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat($),ne={description:"",driver:Z.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function te(n,t){n[t]=function(){var e=arguments;return n.ready().then(function(){return n[t].apply(n,e)})}}function re(){for(var e=1;e<arguments.length;e++){var n=arguments[e];if(n)for(var t in n)n.hasOwnProperty(t)&&(X(n[t])?arguments[0][t]=n[t].slice():arguments[0][t]=n[t])}return arguments[0]}var oe=new(function(){function o(e){for(var n in function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,o),Y)if(Y.hasOwnProperty(n)){var t=Y[n],r=t._driver;this[n]=r,G[r]||this.defineDriver(t)}this._defaultConfig=re({},ne),this._config=re({},this._defaultConfig,e),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch(function(){})}return o.prototype.config=function(e){if("object"!==(void 0===e?"undefined":r(e)))return"string"==typeof e?this._config[e]:this._config;if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var n in e){if("storeName"===n&&(e[n]=e[n].replace(/\W/g,"_")),"version"===n&&"number"!=typeof e[n])return new Error("Database version must be a number.");this._config[n]=e[n]}return!("driver"in e&&e.driver)||this.setDriver(this._config.driver)},o.prototype.defineDriver=function(f,e,n){var t=new l(function(n,t){try{var r=f._driver,e=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!f._driver)return void t(e);for(var o=ee.concat("_initStorage"),i=0,a=o.length;i<a;i++){var u=o[i];if((!K($,u)||f[u])&&"function"!=typeof f[u])return void t(e)}!function(){for(var e=function(t){return function(){var e=new Error("Method "+t+" is not implemented by the current driver"),n=l.reject(e);return d(n,arguments[arguments.length-1]),n}},n=0,t=$.length;n<t;n++){var r=$[n];f[r]||(f[r]=e(r))}}();var c=function(e){G[r]&&console.info("Redefining LocalForage driver: "+r),G[r]=f,V[r]=e,n()};"_support"in f?f._support&&"function"==typeof f._support?f._support().then(c,t):c(!!f._support):c(!0)}catch(e){t(e)}});return c(t,e,n),t},o.prototype.driver=function(){return this._driver||null},o.prototype.getDriver=function(e,n,t){var r=G[e]?l.resolve(G[e]):l.reject(new Error("Driver not found."));return c(r,n,t),r},o.prototype.getSerializer=function(e){var n=l.resolve(P);return c(n,e),n},o.prototype.ready=function(e){var n=this,t=n._driverSet.then(function(){return null===n._ready&&(n._ready=n._initDriver()),n._ready});return c(t,e,e),t},o.prototype.setDriver=function(e,n,t){var i=this;X(e)||(e=[e]);var r=this._getSupportedDrivers(e);function a(){i._config.driver=i.driver()}function u(e){return i._extend(e),a(),i._ready=i._initStorage(i._config),i._ready}var o=null!==this._driverSet?this._driverSet.catch(function(){return l.resolve()}):l.resolve();return this._driverSet=o.then(function(){var e=r[0];return i._dbInfo=null,i._ready=null,i.getDriver(e).then(function(e){var o;i._driver=e._driver,a(),i._wrapLibraryMethodsWithReady(),i._initDriver=(o=r,function(){var r=0;return function e(){for(;r<o.length;){var n=o[r];return r++,i._dbInfo=null,i._ready=null,i.getDriver(n).then(u).catch(e)}a();var t=new Error("No available storage method found.");return i._driverSet=l.reject(t),i._driverSet}()})})}).catch(function(){a();var e=new Error("No available storage method found.");return i._driverSet=l.reject(e),i._driverSet}),c(this._driverSet,n,t),this._driverSet},o.prototype.supports=function(e){return!!V[e]},o.prototype._extend=function(e){re(this,e)},o.prototype._getSupportedDrivers=function(e){for(var n=[],t=0,r=e.length;t<r;t++){var o=e[t];this.supports(o)&&n.push(o)}return n},o.prototype._wrapLibraryMethodsWithReady=function(){for(var e=0,n=ee.length;e<n;e++)te(this,ee[e])},o.prototype.createInstance=function(e){return new o(e)},o}());n.exports=oe},{3:3}]},{},[4])(4)},"object"===ie(a)&&void 0!==i?i.exports=o():(n=[],void 0===(t="function"==typeof(e=o)?e.apply(a,n):e)||(i.exports=t))}).call(this,e(18))},89:function(e,n){var t,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(n){if(t===setTimeout)return setTimeout(n,0);if((t===i||!t)&&setTimeout)return t=setTimeout,setTimeout(n,0);try{return t(n,0)}catch(e){try{return t.call(null,n,0)}catch(e){return t.call(this,n,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:i}catch(e){t=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,f=[],s=!1,l=-1;function d(){s&&c&&(s=!1,c.length?f=c.concat(f):l=-1,f.length&&v())}function v(){if(!s){var e=u(d);s=!0;for(var n=f.length;n;){for(c=f,f=[];++l<n;)c&&c[l].run();l=-1,n=f.length}c=null,s=!1,function(n){if(r===clearTimeout)return clearTimeout(n);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(n);try{r(n)}catch(e){try{return r.call(null,n)}catch(e){return r.call(this,n)}}}(e)}}function h(e,n){this.fun=e,this.array=n}function y(){}o.nextTick=function(e){var n=new Array(arguments.length-1);if(1<arguments.length)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];f.push(new h(e,n)),1!==f.length||s||u(v)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,